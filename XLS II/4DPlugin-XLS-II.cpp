/* --------------------------------------------------------------------------------
 #
 #  4DPlugin-XLS-II.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : XLS II
 #	author : miyako
 #	2019/12/20
 #  
 # --------------------------------------------------------------------------------*/

#include "4DPlugin-XLS-II.h"

std::mutex mutexWorkbooks;

std::map<uint32_t, BasicExcel*> _workbooks;

#pragma mark -

void _setANSIString(C_TEXT &t, string &p, C_TEXT &encoding){
    
    if (encoding.getUTF16Length()) {
        
        //encoding specified, use iconv
        
        CUTF8String e;
        encoding.copyUTF8String(&e);
        
        iconv_t conv_desc = iconv_open((const char *)e.c_str(), "UTF-16LE");
        
        if ((size_t)conv_desc != (size_t) -1) {
            
            const char *inData = (const char *)t.getUTF16StringPtr();
            size_t inDataLen = (size_t)t.getUTF16Length() * sizeof(PA_Unichar);
            size_t outDataLen = (size_t)(inDataLen * 4) + 1;
            size_t outDataLeft = outDataLen;
            std::vector<char> buf(outDataLen);
            char *outData = (char *)&buf[0];
            char *outDataPtr = outData;
            
            if (!iconv (conv_desc, (char **)&inData, &inDataLen, &outData, &outDataLeft)) {
                p = string((const char *)outDataPtr, outDataLen - outDataLeft);
            }
            
            iconv_close (conv_desc);
        }
        
    }else{
        
        //no encoding specifed, use internal Unicode/ANSI converter (not used in this program)
        
        size_t outDataLen = (size_t)(t.getUTF16Length() * 4) + 1;
        std::vector<char> buf(outDataLen);
        
        int len = PA_ConvertCharsetToCharset(
                                                                                 (char *)t.getUTF16StringPtr(),
                                                                                 t.getUTF16Length() * sizeof(PA_Unichar),
                                                                                 eVTC_UTF_16_SMALLENDIAN,
                                                                                 (char *)&buf[0],
                                                                                 outDataLen,
                                                                                 eVTC_ODBC_DEFAULT //native ANSI
                                                                                 );
        
        if(len) {
            p = string((const char *)&buf[0], len);
        }
        
    }
}

void _getANSIString(string &p, C_TEXT &t, C_TEXT &encoding){
    
    if (encoding.getUTF16Length()) {
        
        //encoding specified, use iconv
        
        CUTF8String e;
        encoding.copyUTF8String(&e);
        
        iconv_t conv_desc = iconv_open("UTF-16LE", (const char *)e.c_str());
        
        if ((size_t)conv_desc != (size_t) -1) {
            
            const char *inData = (const char *)p.c_str();
            size_t inDataLen = (size_t)p.length();
            size_t outDataLen = (size_t)(inDataLen * 4) + sizeof(PA_Unichar);
            size_t outDataLeft = outDataLen;
            std::vector<char> buf(outDataLen);
            char *outData = (char *)&buf[0];
            char *outDataPtr = outData;
            
            if (!iconv (conv_desc, (char **)&inData, &inDataLen, &outData, &outDataLeft)) {
                t.setUTF16String((const PA_Unichar *)outDataPtr, (outDataLen - outDataLeft) / sizeof(PA_Unichar));
            }
            
            iconv_close (conv_desc);
        }
        
    }else{
        
        //no encoding specifed, use internal ANSI/Unicode converter
        //TODO: maybe call the EX_CHANGE_STRING entry point instead?
        
        size_t outDataLen = (size_t)(p.length() * 4) + sizeof(PA_Unichar);
        std::vector<char> buf(outDataLen);
        
        int len = PA_ConvertCharsetToCharset(
                                                                                 (char *)p.c_str(),
                                                                                 p.length(),
                                                                                 eVTC_ODBC_DEFAULT, //ANSI
                                                                                 (char *)&buf[0],
                                                                                 outDataLen,
                                                                                 eVTC_UTF_16_SMALLENDIAN
                                                                                 );
        
        if(len) {
            t.setUTF16String((const PA_Unichar *)&buf[0], len / sizeof(PA_Unichar));
        }
        
    }
}

#pragma mark -

void _setString(C_TEXT &t, wstring &p){
#if VERSIONMAC
    iconv_t conv_desc = iconv_open("UTF-32LE", "UTF-16LE");
    
    if ((size_t)conv_desc != (size_t) -1) {
        
        const char *inData = (const char *)t.getUTF16StringPtr();
        size_t inDataLen = (size_t)t.getUTF16Length() * sizeof(PA_Unichar);
        size_t outDataLen = (size_t)(inDataLen * 2) + sizeof(PA_Unichar);
        size_t outDataLeft = outDataLen;
        std::vector<char> buf(outDataLen);
        char *outData = (char *)&buf[0];
        char *outDataPtr = outData;
        
        if (!iconv (conv_desc, (char **)&inData, &inDataLen, &outData, &outDataLeft)) {
            p = wstring((const wchar_t *)outDataPtr, (outDataLen - outDataLeft) / sizeof(wchar_t));
        }
        
        iconv_close (conv_desc);
    }
#else
    p = wstring((wchar_t *)t.getUTF16StringPtr());
#endif
}

void _getString(wstring &p, C_TEXT &t){
#if VERSIONMAC
    iconv_t conv_desc = iconv_open("UTF-16LE", "UTF-32LE");
    
    if ((size_t)conv_desc != (size_t) -1) {
        
        const char *inData = (const char *)p.c_str();
        size_t inDataLen = (size_t)p.length() * sizeof(wchar_t);
        size_t outDataLen = (size_t)(inDataLen * 2) + sizeof(PA_Unichar);
        size_t outDataLeft = outDataLen;
        std::vector<char> buf(outDataLen);
        char *outData = (char *)&buf[0];
        char *outDataPtr = outData;
        
        if (!iconv (conv_desc, (char **)&inData, &inDataLen, &outData, &outDataLeft)) {
            t.setUTF16String((const PA_Unichar *)outDataPtr, (outDataLen - outDataLeft) / sizeof(PA_Unichar));
        }
        
        iconv_close (conv_desc);
    }
#else
    t.setUTF16String((const PA_Unichar*)p.c_str(), (uint32_t)p.length());
#endif
}

#pragma mark -

#if VERSIONMAC
void _getPath(C_TEXT &t, string &p){
    
    NSString *path = t.copyPath();
    CFIndex size = CFStringGetMaximumSizeOfFileSystemRepresentation((CFStringRef)path);
    std::vector<char> buf(size);
    [path getFileSystemRepresentation:&buf[0] maxLength:size];
    p = string(&buf[0]);
    [path release];
    
}
#else
void _getPath(C_TEXT &t, wstring &p){
    
    p = wstring((wchar_t *)t.getUTF16StringPtr());
    
}
#endif

#pragma mark -

BasicExcel *_workbookCreate(unsigned int *index){
    
    std::lock_guard<std::mutex> lock(mutexWorkbooks);
    
    BasicExcel *w = new BasicExcel;
    
    unsigned int i = 1;
    
    while (_workbooks.find(i) != _workbooks.end()) {
        i++;
    }
    
    _workbooks.insert(std::map<uint32_t, BasicExcel*>::value_type(i, w));
    
    *index = i;
    
    return w;
}

void _workbookDelete(unsigned int i){
    
    std::lock_guard<std::mutex> lock(mutexWorkbooks);
    
    BasicExcel *w = NULL;
    
    std::map<uint32_t, BasicExcel*>::iterator pos = _workbooks.find(i);
    
    if(pos != _workbooks.end()) {
        w = pos->second;
        delete w;
        _workbooks.erase(pos);
    }
    
}

BasicExcel *_workbookGet(unsigned int i){
    
    std::lock_guard<std::mutex> lock(mutexWorkbooks);
    
    BasicExcel *w = NULL;
    
    std::map<uint32_t, BasicExcel*>::iterator pos = _workbooks.find(i);
    
    if(pos != _workbooks.end()) {
        w = pos->second;
    }
    
    return w;
}

#pragma mark -

void PluginMain(PA_long32 selector, PA_PluginParameters params) {
    
	try
	{
        switch(selector)
        {
			// --- XLS II
            
			case 1 :
				XLS_Create(params);
				break;
			case 2 :
				XLS_Load(params);
				break;
			case 3 :
				XLS_Save_as(params);
				break;
			case 4 :
				XLS_CLOSE(params);
				break;
			case 5 :
				XLS_Get_total_sheets(params);
				break;
			case 6 :
				XLS_Add_sheet(params);
				break;
			case 7 :
				XLS_Get_sheet_name(params);
				break;
			case 8 :
				XLS_Set_sheet_name(params);
				break;
			case 9 :
				XLS_Get_total_rows(params);
				break;
			case 10 :
				XLS_Get_total_columns(params);
				break;
			case 11 :
				XLS_Set_column_width(params);
				break;
			case 12 :
				XLS_Get_column_width(params);
				break;
			case 13 :
				XLS_Merge_cells(params);
				break;
			case 14 :
				XLS_Clear_value(params);
				break;
			case 15 :
				XLS_Get_text_value(params);
				break;
			case 16 :
				XLS_Get_real_value(params);
				break;
			case 17 :
				XLS_Get_long_value(params);
				break;
			case 18 :
				XLS_Set_long_value(params);
				break;
			case 19 :
				XLS_Set_real_value(params);
				break;
			case 20 :
				XLS_Set_text_value(params);
				break;
			case 21 :
				XLS_Get_value_type(params);
				break;
			case 22 :
				XLS_SET_FONT_PROPERTY(params);
				break;
			case 23 :
				XLS_GET_FONT_PROPERTY(params);
				break;
			case 24 :
				XLS_SET_FORMAT_PROPERTY(params);
				break;
			case 25 :
				XLS_GET_FORMAT_PROPERTY(params);
				break;
			case 26 :
				XLS_Get_format_string(params);
				break;
			case 27 :
				XLS_Set_format_string(params);
				break;
			case 28 :
				XLS_Get_wrapping(params);
				break;
			case 29 :
				XLS_SET_WRAPPING(params);
				break;

        }

	}
	catch(...)
	{

	}
}

#pragma mark -

void XLS_Create(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
 
    C_LONGINT sheets;
    C_LONGINT returnValue;
    
    sheets.fromParamAtIndex(pParams, 1);
    
    unsigned int index;
    
    BasicExcel *wb = _workbookCreate(&index);
    
    unsigned int countSheets = sheets.getIntValue();
    
    //some reasonable bounds...
    
    if(countSheets == 0) countSheets = 1;
    if(countSheets > 10) countSheets = 10;
    
    wb->New(countSheets);
    
    returnValue.setIntValue(index);
    returnValue.setReturn(pResult);
}

void XLS_Load(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
        C_TEXT filePath;
        C_LONGINT returnValue;
        
        filePath.fromParamAtIndex(pParams, 1);
        
    #if VERSIONMAC
        string path;
    #else
        wstring path;
    #endif
        
        unsigned int index;
        
        _getPath(filePath, path);
        
        BasicExcel *wb = _workbookCreate(&index);
        
        if(wb->Load(path.c_str()))
            returnValue.setIntValue(index);
        
        returnValue.setReturn(pResult);
}

void XLS_Save_as(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;

        C_LONGINT workbook;
        C_TEXT filePath;
        C_LONGINT returnValue;
        
        workbook.fromParamAtIndex(pParams, 1);
        filePath.fromParamAtIndex(pParams, 2);
        
    #if VERSIONMAC
        string path;
    #else
        wstring path;
    #endif
        
        _getPath(filePath, path);
        
        BasicExcel *wb = _workbookGet(workbook.getIntValue());
        
        if(wb)
            returnValue.setIntValue(wb->SaveAs(path.c_str()));
        
        returnValue.setReturn(pResult);
}

void XLS_CLOSE(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_LONGINT workbook;
    
    workbook.fromParamAtIndex(pParams, 1);
    
    BasicExcel *wb = _workbookGet(workbook.getIntValue());
    
    if(wb) {
        wb->Close();
        _workbookDelete(workbook.getIntValue());
    }
}

void XLS_Get_total_sheets(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_LONGINT workbook;
    C_LONGINT returnValue;
    
    workbook.fromParamAtIndex(pParams, 1);
    
    BasicExcel *wb = _workbookGet(workbook.getIntValue());
    
    if(wb)
        returnValue.setIntValue(wb->GetTotalWorkSheets());
    
    returnValue.setReturn(pResult);
}

void XLS_Add_sheet(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_LONGINT workbook;
    C_TEXT sheetName;
    C_LONGINT sheetPosition;
    C_LONGINT returnValue;
    
    workbook.fromParamAtIndex(pParams, 1);
    sheetName.fromParamAtIndex(pParams, 2);
    sheetPosition.fromParamAtIndex(pParams, 3);
    
    wstring name;
    
    BasicExcel *wb = _workbookGet(workbook.getIntValue());
    int sheetCount = sheetPosition.getIntValue();
    
    if(wb){
        _setString(sheetName, name);
        if((sheetCount > 0) && (sheetCount <= wb->GetTotalWorkSheets())){
            sheetCount = sheetCount -1;
        }
        else{
            sheetCount = -1;//add to last
        }
        
        wb->AddWorksheet(name.c_str(), sheetCount);
        returnValue.setIntValue(1);
    }
    
    returnValue.setReturn(pResult);
}

void XLS_Get_sheet_name(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_LONGINT workbook;
    C_LONGINT sheetPosition;
    C_TEXT sheetName;
    C_LONGINT returnValue;
    
    workbook.fromParamAtIndex(pParams, 1);
    sheetPosition.fromParamAtIndex(pParams, 2);
    
    BasicExcel *wb = _workbookGet(workbook.getIntValue());
    int sheetCount = sheetPosition.getIntValue();
    
    wstring name;
    
    if(wb){
        if((sheetCount > 0) && (sheetCount <= wb->GetTotalWorkSheets())){
            if(wb->GetSheetName(sheetCount-1, &name)){
                _getString(name, sheetName);
                returnValue.setIntValue(1);
            }else{
                string n;
                if(wb->GetSheetName(sheetCount-1, &n)){
                    CUTF8String u;
                    u = (const uint8_t *)n.c_str();
                    sheetName.setUTF8String(&u);
                    returnValue.setIntValue(1);
                }
            }
        }
    }
    
    sheetName.toParamAtIndex(pParams, 3);
    returnValue.setReturn(pResult);
}

void XLS_Set_sheet_name(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_LONGINT workbook;
    C_LONGINT sheetPosition;
    C_TEXT sheetName;
    C_LONGINT returnValue;
    
    workbook.fromParamAtIndex(pParams, 1);
    sheetPosition.fromParamAtIndex(pParams, 2);
    sheetName.fromParamAtIndex(pParams, 3);
    
    wstring name;
    
    BasicExcel *wb = _workbookGet(workbook.getIntValue());
    int sheetCount = sheetPosition.getIntValue();
    
    if(wb){
        if((sheetCount > 0) && (sheetCount <= wb->GetTotalWorkSheets())){
            _setString(sheetName, name);
            returnValue.setIntValue(wb->RenameWorksheet(sheetCount-1, name.c_str()));
        }
    }
    
    returnValue.setReturn(pResult);
}

void XLS_Get_total_rows(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_LONGINT workbook;
    C_LONGINT sheet;
    C_LONGINT returnValue;
    
    workbook.fromParamAtIndex(pParams, 1);
    sheet.fromParamAtIndex(pParams, 2);
    
    BasicExcel *wb = _workbookGet(workbook.getIntValue());
    int sheetCount = sheet.getIntValue();
    
    if(wb){
        if((sheetCount > 0) && (sheetCount <= wb->GetTotalWorkSheets())){
            BasicExcelWorksheet *ws = wb->GetWorksheet(sheetCount-1);
            if(ws){
                returnValue.setIntValue(ws->GetTotalRows());
            }
        }
    }
    
    returnValue.setReturn(pResult);
}

void XLS_Get_total_columns(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
 
    C_LONGINT workbook;
    C_LONGINT sheet;
    C_LONGINT returnValue;
    
    workbook.fromParamAtIndex(pParams, 1);
    sheet.fromParamAtIndex(pParams, 2);
    
    BasicExcel *wb = _workbookGet(workbook.getIntValue());
    int sheetCount = sheet.getIntValue();
    
    if(wb){
        if((sheetCount > 0) && (sheetCount <= wb->GetTotalWorkSheets())){
            BasicExcelWorksheet *ws = wb->GetWorksheet(sheetCount-1);
            if(ws){
                returnValue.setIntValue(ws->GetTotalCols());
            }
        }
    }
    
    returnValue.setReturn(pResult);
}

void XLS_Set_column_width(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_LONGINT workbook;
    C_LONGINT sheet;
    C_LONGINT column;
    C_LONGINT width;
    C_LONGINT returnValue;
    
    workbook.fromParamAtIndex(pParams, 1);
    sheet.fromParamAtIndex(pParams, 2);
    column.fromParamAtIndex(pParams, 3);
    width.fromParamAtIndex(pParams, 4);
    
    BasicExcel *wb = _workbookGet(workbook.getIntValue());
    int sheetCount = sheet.getIntValue();
    
    if(wb){
        if((sheetCount > 0) && (sheetCount <= wb->GetTotalWorkSheets())){
            BasicExcelWorksheet *ws = wb->GetWorksheet(sheetCount-1);
            if(ws){
                
                int c = column.getIntValue();
                
                if(   (c > 0)
                     && (c <= ws->GetTotalCols())){
                    ws->SetColWidth(c-1, width.getIntValue());
                    returnValue.setIntValue(1);
                }
            }
        }
    }
    
    returnValue.setReturn(pResult);
}

void XLS_Get_column_width(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_LONGINT workbook;
    C_LONGINT sheet;
    C_LONGINT column;
    C_LONGINT returnValue;
    
    workbook.fromParamAtIndex(pParams, 1);
    sheet.fromParamAtIndex(pParams, 2);
    column.fromParamAtIndex(pParams, 3);
    
    BasicExcel *wb = _workbookGet(workbook.getIntValue());
    int sheetCount = sheet.getIntValue();
    
    if(wb){
        if((sheetCount > 0) && (sheetCount <= wb->GetTotalWorkSheets())){
            BasicExcelWorksheet *ws = wb->GetWorksheet(sheetCount-1);
            if(ws){
                
                int c = column.getIntValue();
                
                if(   (c > 0)
                     && (c <= ws->GetTotalCols())){
                    returnValue.setIntValue(ws->GetColWidth(c-1));
                }
            }
        }
    }
    
    returnValue.setReturn(pResult);
}

void XLS_Merge_cells(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_LONGINT workbook;
    C_LONGINT sheet;
    C_LONGINT row;
    C_LONGINT column;
    C_LONGINT height;
    C_LONGINT width;
    C_LONGINT returnValue;
    
    workbook.fromParamAtIndex(pParams, 1);
    sheet.fromParamAtIndex(pParams, 2);
    row.fromParamAtIndex(pParams, 3);
    column.fromParamAtIndex(pParams, 4);
    height.fromParamAtIndex(pParams, 5);
    width.fromParamAtIndex(pParams, 6);
    
    BasicExcel *wb = _workbookGet(workbook.getIntValue());
    int sheetCount = sheet.getIntValue();
    
    if(wb){
        if((sheetCount > 0) && (sheetCount <= wb->GetTotalWorkSheets())){
            BasicExcelWorksheet *ws = wb->GetWorksheet(sheetCount-1);
            if(ws){
                
                int r = row.getIntValue();
                int c = column.getIntValue();
                int h = height.getIntValue();
                int w = width.getIntValue();
                /*
                if(   (c > 0)
                     && (c <= ws->GetTotalCols())
                     && (r > 0)
                     && (r <= ws->GetTotalRows())
                     && (h > 1)
                     && ((h + r) <= ws->GetTotalRows())
                     && (w > 1)
                     && ((w + c) <= ws->GetTotalCols())){
                    
                    */
                   //means that the height or the width have to be > 1
                if(   (c > 0)
                     && (c <= ws->GetTotalCols())
                     && (r > 0)
                     && (r <= ws->GetTotalRows())
                     && ((h > 1) || (w>1))
                     && ((h + r) <= ws->GetTotalRows())
                     && ((w + c) <= ws->GetTotalCols())){
                    //
                    ws->MergeCells(r-1, c-1, h, w);
                    returnValue.setIntValue(1);
                }
            }
        }
    }
    
    returnValue.setReturn(pResult);
}

void XLS_Clear_value(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_LONGINT workbook;
    C_LONGINT sheet;
    C_LONGINT row;
    C_LONGINT column;
    C_LONGINT returnValue;
    
    workbook.fromParamAtIndex(pParams, 1);
    sheet.fromParamAtIndex(pParams, 2);
    row.fromParamAtIndex(pParams, 3);
    column.fromParamAtIndex(pParams, 4);
    
    BasicExcel *wb = _workbookGet(workbook.getIntValue());
    int sheetCount = sheet.getIntValue();
    
    if(wb){
        if((sheetCount > 0) && (sheetCount <= wb->GetTotalWorkSheets())){
            BasicExcelWorksheet *ws = wb->GetWorksheet(sheetCount-1);
            if(ws){
                
                int r = row.getIntValue();
                int c = column.getIntValue();
                
                if(   (c > 0)
                     && (c <= ws->GetTotalCols())
                     && (r > 0)
                     && (r <= ws->GetTotalRows())){
                    returnValue.setIntValue(ws->EraseCell(r-1, c-1));
                }
            }
        }
    }
    
    returnValue.setReturn(pResult);
}

void XLS_Get_text_value(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_LONGINT workbook;
    C_LONGINT sheet;
    C_LONGINT row;
    C_LONGINT column;
    C_TEXT encoding;
    C_TEXT returnValue;
    
    workbook.fromParamAtIndex(pParams, 1);
    sheet.fromParamAtIndex(pParams, 2);
    row.fromParamAtIndex(pParams, 3);
    column.fromParamAtIndex(pParams, 4);
    encoding.fromParamAtIndex(pParams, 5);
    
    BasicExcel *wb = _workbookGet(workbook.getIntValue());
    int sheetCount = sheet.getIntValue();
    
    if(wb) {
        if((sheetCount > 0) && (sheetCount <= wb->GetTotalWorkSheets())){
            BasicExcelWorksheet *ws = wb->GetWorksheet(sheetCount-1);
            if(ws){
                
                int r = row.getIntValue();
                int c = column.getIntValue();
                
                if(   (c > 0)
                     && (c <= ws->GetTotalCols())
                     && (r > 0)
                     && (r <= ws->GetTotalRows())){
                    
                    BasicExcelCell *cell = ws->Cell(r-1, c-1);
                    
                    if(cell){
                        
                        const wchar_t *w = cell->GetWString();
                        
                        if(w){
                            wstring u = wstring((const wchar_t *)w, cell->GetStringLength());
                            _getString(u, returnValue);
                        }else{
                            const char *a = cell->GetString();
                            if(a){
                                string s = string((const char *)a, cell->GetStringLength());
                                _getANSIString(s, returnValue, encoding);
                            }
                        }
                    }
                }
            }
        }
    }
    
    returnValue.setReturn(pResult);
}

void XLS_Get_real_value(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_LONGINT workbook;
    C_LONGINT sheet;
    C_LONGINT row;
    C_LONGINT column;
    C_REAL returnValue;
    
    workbook.fromParamAtIndex(pParams, 1);
    sheet.fromParamAtIndex(pParams, 2);
    row.fromParamAtIndex(pParams, 3);
    column.fromParamAtIndex(pParams, 4);
    
    BasicExcel *wb = _workbookGet(workbook.getIntValue());
    int sheetCount = sheet.getIntValue();
    
    if(wb){
        if((sheetCount > 0) && (sheetCount <= wb->GetTotalWorkSheets())){
            BasicExcelWorksheet *ws = wb->GetWorksheet(sheetCount-1);
            if(ws){
                
                int r = row.getIntValue();
                int c = column.getIntValue();
                
                if(   (c > 0)
                     && (c <= ws->GetTotalCols())
                     && (r > 0)
                     && (r <= ws->GetTotalRows())){
                    
                    BasicExcelCell *cell = ws->Cell(r-1, c-1);
                    if(cell){
                        returnValue.setDoubleValue(cell->GetDouble());
                    }
                }
            }
        }
    }
    
    returnValue.setReturn(pResult);
}

void XLS_Get_long_value(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_LONGINT workbook;
    C_LONGINT sheet;
    C_LONGINT row;
    C_LONGINT column;
    C_LONGINT returnValue;
    
    workbook.fromParamAtIndex(pParams, 1);
    sheet.fromParamAtIndex(pParams, 2);
    row.fromParamAtIndex(pParams, 3);
    column.fromParamAtIndex(pParams, 4);
    
    BasicExcel *wb = _workbookGet(workbook.getIntValue());
    int sheetCount = sheet.getIntValue();
    
    if(wb){
        
        BasicExcelWorksheet *ws = wb->GetWorksheet(sheetCount-1);
        if(ws){
            
            int r = row.getIntValue();
            int c = column.getIntValue();
            
            BasicExcelCell *cell = ws->Cell(r-1, c-1);
            if(cell){
                returnValue.setIntValue(cell->GetInteger());
                returnValue.setIntValue(1);
            }
        }
    }
    
    returnValue.setReturn(pResult);
}

void XLS_Set_long_value(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_LONGINT workbook;
    C_LONGINT sheet;
    C_LONGINT row;
    C_LONGINT column;
    C_LONGINT intValue;
    C_LONGINT returnValue;
    
    workbook.fromParamAtIndex(pParams, 1);
    sheet.fromParamAtIndex(pParams, 2);
    row.fromParamAtIndex(pParams, 3);
    column.fromParamAtIndex(pParams, 4);
    intValue.fromParamAtIndex(pParams, 5);
    
    BasicExcel *wb = _workbookGet(workbook.getIntValue());
    int sheetCount = sheet.getIntValue();
    
    if(wb){
        
        BasicExcelWorksheet *ws = wb->GetWorksheet(sheetCount-1);
        if(ws){
            
            int r = row.getIntValue();
            int c = column.getIntValue();
            
            BasicExcelCell *cell = ws->Cell(r-1, c-1);
            if(cell){
                cell->SetInteger(intValue.getIntValue());
                returnValue.setIntValue(1);
            }
        }
    }
    
    returnValue.setReturn(pResult);
}

void XLS_Set_real_value(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_LONGINT workbook;
    C_LONGINT sheet;
    C_LONGINT row;
    C_LONGINT column;
    C_REAL realValue;
    C_LONGINT returnValue;
    
    workbook.fromParamAtIndex(pParams, 1);
    sheet.fromParamAtIndex(pParams, 2);
    row.fromParamAtIndex(pParams, 3);
    column.fromParamAtIndex(pParams, 4);
    realValue.fromParamAtIndex(pParams, 5);
    
    BasicExcel *wb = _workbookGet(workbook.getIntValue());
    int sheetCount = sheet.getIntValue();
    
    if(wb){
        
        BasicExcelWorksheet *ws = wb->GetWorksheet(sheetCount-1);
        if(ws){
            
            int r = row.getIntValue();
            int c = column.getIntValue();
            
            BasicExcelCell *cell = ws->Cell(r-1, c-1);
            if(cell){
                cell->SetDouble(realValue.getDoubleValue());
                returnValue.setIntValue(1);
            }
        }
    }
    
    returnValue.setReturn(pResult);
}

void XLS_Set_text_value(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_LONGINT workbook;
    C_LONGINT sheet;
    C_LONGINT row;
    C_LONGINT column;
    C_TEXT stringValue;
    C_TEXT encoding;
    C_LONGINT returnValue;
    
    workbook.fromParamAtIndex(pParams, 1);
    sheet.fromParamAtIndex(pParams, 2);
    row.fromParamAtIndex(pParams, 3);
    column.fromParamAtIndex(pParams, 4);
    stringValue.fromParamAtIndex(pParams, 5);
    encoding.fromParamAtIndex(pParams, 6);
    
    BasicExcel *wb = _workbookGet(workbook.getIntValue());
    int sheetCount = sheet.getIntValue();
    
    if(wb){
        
        BasicExcelWorksheet *ws = wb->GetWorksheet(sheetCount-1);
        
        if(ws){
            
            int r = row.getIntValue();
            int c = column.getIntValue();
            
            BasicExcelCell *cell = ws->Cell(r-1, c-1);
            
            if(cell){
                
                if(!encoding.getUTF16Length()) {
                    
                    //set Unicode
                    
                    wstring w;
                    _setString(stringValue, w);
                    cell->SetWString(w.c_str());
                    returnValue.setIntValue(1);
                    
                }else{
                    
                    //set ANSI
                    
                    string a;
                    _setANSIString(stringValue, a, encoding);
                    cell->SetString(a.c_str());
                    returnValue.setIntValue(1);
                    
                }
            }
        }
    }
    
    returnValue.setReturn(pResult);
}

void XLS_Get_value_type(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_LONGINT workbook;
    C_LONGINT sheet;
    C_LONGINT row;
    C_LONGINT column;
    C_LONGINT returnValue;
    
    workbook.fromParamAtIndex(pParams, 1);
    sheet.fromParamAtIndex(pParams, 2);
    row.fromParamAtIndex(pParams, 3);
    column.fromParamAtIndex(pParams, 4);
    
    BasicExcel *wb = _workbookGet(workbook.getIntValue());
    int sheetCount = sheet.getIntValue();
    
    if(wb){
        if((sheetCount > 0) && (sheetCount <= wb->GetTotalWorkSheets())){
            BasicExcelWorksheet *ws = wb->GetWorksheet(sheetCount-1);
            if(ws){
                
                int r = row.getIntValue();
                int c = column.getIntValue();
                
                if(   (c > 0)
                     && (c <= ws->GetTotalCols())
                     && (r > 0)
                     && (r <= ws->GetTotalRows())){
                    
                    BasicExcelCell *cell = ws->Cell(r-1, c-1);
                    if(cell){
                        returnValue.setIntValue(cell->Type());
                    }
                }
            }
        }
    }
    
    returnValue.setReturn(pResult);
}

void XLS_SET_FONT_PROPERTY(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
        C_LONGINT workbook;
        C_LONGINT sheet;
        C_LONGINT row;
        C_LONGINT column;
        C_TEXT name;
        C_LONGINT height;
        C_LONGINT color;
        C_LONGINT weight;
        C_LONGINT option;
        C_LONGINT underline;
        C_LONGINT family;
        C_LONGINT escapement;
        
        workbook.fromParamAtIndex(pParams, 1);
        sheet.fromParamAtIndex(pParams, 2);
        row.fromParamAtIndex(pParams, 3);
        column.fromParamAtIndex(pParams, 4);
        name.fromParamAtIndex(pParams, 5);
        height.fromParamAtIndex(pParams, 6);
        color.fromParamAtIndex(pParams, 7);
        weight.fromParamAtIndex(pParams, 8);
        option.fromParamAtIndex(pParams, 9);
        underline.fromParamAtIndex(pParams, 10);
        family.fromParamAtIndex(pParams, 11);
        escapement.fromParamAtIndex(pParams, 12);
        
        BasicExcel *wb = _workbookGet(workbook.getIntValue());
        int sheetCount = sheet.getIntValue();
        
        if(wb){
            if((sheetCount > 0) && (sheetCount <= wb->GetTotalWorkSheets())){
                BasicExcelWorksheet *ws = wb->GetWorksheet(sheetCount-1);
                if(ws){
                    
                    int r = row.getIntValue();
                    int c = column.getIntValue();
                    
                    if(   (c > 0)
                         && (c <= ws->GetTotalCols())
                         && (r > 0)
                         && (r <= ws->GetTotalRows())){
                        
                        BasicExcelCell *cell = ws->Cell(r-1, c-1);
                        
                        if(cell){
                            
                            XLSFormatManager mgr(*wb);
    //                        ExcelFont font;
                            
                            CellFormat fmt(mgr, cell);
                            ExcelFont font = fmt.get_font();
                            
                            wstring u;
                            _setString(name, u);
                            font.set_font_name(u.c_str());
                            font.set_color_index(color.getIntValue());
                            font.set_weight(weight.getIntValue());
                            font.set_underline_type(underline.getIntValue());
                            font._options = option.getIntValue();
                            font._font_family = family.getIntValue();
                            font.set_escapement(escapement.getIntValue());
                            font.set_height(height.getIntValue());
                            
    //                        CellFormat fmt(mgr);
                            fmt.set_font(font);
                            cell->SetFormat(fmt);
                            
                        }
                    }
                }
            }
        }
}

void XLS_GET_FONT_PROPERTY(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_LONGINT workbook;
    C_LONGINT sheet;
    C_LONGINT row;
    C_LONGINT column;
    C_TEXT name;
    C_LONGINT height;
    C_LONGINT color;
    C_LONGINT weight;
    C_LONGINT option;
    C_LONGINT underline;
    C_LONGINT family;
    C_LONGINT escapement;
    
    workbook.fromParamAtIndex(pParams, 1);
    sheet.fromParamAtIndex(pParams, 2);
    row.fromParamAtIndex(pParams, 3);
    column.fromParamAtIndex(pParams, 4);
    
    BasicExcel *wb = _workbookGet(workbook.getIntValue());
    int sheetCount = sheet.getIntValue();
    
    if(wb){
        if((sheetCount > 0) && (sheetCount <= wb->GetTotalWorkSheets())){
            BasicExcelWorksheet *ws = wb->GetWorksheet(sheetCount-1);
            if(ws){
                
                int r = row.getIntValue();
                int c = column.getIntValue();
                
                if(   (c > 0)
                     && (c <= ws->GetTotalCols())
                     && (r > 0)
                     && (r <= ws->GetTotalRows())){
                    
                    BasicExcelCell *cell = ws->Cell(r-1, c-1);
                    
                    if(cell){
                        
                        XLSFormatManager mgr(*wb);
                        CellFormat fmt(mgr, cell);
                        ExcelFont fnt = fmt.get_font();
                        
                        wstring u = fnt._name;
                        _getString(u, name);
                        
                        height.setIntValue(fnt._height);
                        color.setIntValue(fnt._color_index);
                        weight.setIntValue(fnt._weight);
                        option.setIntValue(fnt._options);
                        underline.setIntValue(fnt._underline_type);
                        family.setIntValue(fnt._font_family);
                        escapement.setIntValue(fnt._escapement_type);
                    }
                }
            }
        }
    }
    
    name.toParamAtIndex(pParams, 5);
    height.toParamAtIndex(pParams, 6);
    color.toParamAtIndex(pParams, 7);
    weight.toParamAtIndex(pParams, 8);
    option.toParamAtIndex(pParams, 9);
    underline.toParamAtIndex(pParams, 10);
    family.toParamAtIndex(pParams, 11);
    escapement.toParamAtIndex(pParams, 12);
}

void XLS_SET_FORMAT_PROPERTY(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
        C_LONGINT workbook;
        C_LONGINT sheet;
        C_LONGINT row;
        C_LONGINT column;
        C_LONGINT alignment;
        C_LONGINT rotation;
        C_LONGINT textProps;
        C_LONGINT borderlineTop;
        C_LONGINT borderlineTopColor;
        C_LONGINT borderlineLeft;
        C_LONGINT borderlineLeftColor;
        C_LONGINT borderlineRight;
        C_LONGINT borderlineRightColor;
        C_LONGINT borderlineBottom;
        C_LONGINT borderlineBottomColor;
        C_LONGINT pattern;
        C_LONGINT patternColor;
        C_LONGINT patternBackColor;
        
        workbook.fromParamAtIndex(pParams, 1);
        sheet.fromParamAtIndex(pParams, 2);
        row.fromParamAtIndex(pParams, 3);
        column.fromParamAtIndex(pParams, 4);
        alignment.fromParamAtIndex(pParams, 5);
        rotation.fromParamAtIndex(pParams, 6);
        textProps.fromParamAtIndex(pParams, 7);
        borderlineTop.fromParamAtIndex(pParams, 8);
        borderlineTopColor.fromParamAtIndex(pParams, 9);
        borderlineLeft.fromParamAtIndex(pParams, 10);
        borderlineLeftColor.fromParamAtIndex(pParams, 11);
        borderlineRight.fromParamAtIndex(pParams, 12);
        borderlineRightColor.fromParamAtIndex(pParams, 13);
        borderlineBottom.fromParamAtIndex(pParams, 14);
        borderlineBottomColor.fromParamAtIndex(pParams, 15);
        pattern.fromParamAtIndex(pParams, 16);
        patternColor.fromParamAtIndex(pParams, 17);
        patternBackColor.fromParamAtIndex(pParams, 18);
        
        BasicExcel *wb = _workbookGet(workbook.getIntValue());
        int sheetCount = sheet.getIntValue();
        
        if(wb){
            if((sheetCount > 0) && (sheetCount <= wb->GetTotalWorkSheets())){
                BasicExcelWorksheet *ws = wb->GetWorksheet(sheetCount-1);
                if(ws){
                    
                    int r = row.getIntValue();
                    int c = column.getIntValue();
                    
                    if(   (c > 0)
                         && (c <= ws->GetTotalCols())
                         && (r > 0)
                         && (r <= ws->GetTotalRows())){
                        
                        BasicExcelCell *cell = ws->Cell(r-1, c-1);
                        
                        if(cell){
                            
                            XLSFormatManager mgr(*wb);
    //                        CellFormat fmt(mgr);
                            
                            CellFormat fmt(mgr, cell);
                            
                            fmt.set_alignment(alignment.getIntValue());
                            fmt.set_rotation(rotation.getIntValue());
                            fmt.set_text_props(textProps.getIntValue());
                            
                            fmt.set_borderlines(
                                                                    (EXCEL_LS)borderlineLeft.getIntValue(),
                                                                    (EXCEL_LS)borderlineRight.getIntValue(),
                                                                    (EXCEL_LS)borderlineTop.getIntValue(),
                                                                    (EXCEL_LS)borderlineBottom.getIntValue(),
                                                                    borderlineLeftColor.getIntValue(),
                                                                    borderlineRightColor.getIntValue(),
                                                                    borderlineTopColor.getIntValue(),
                                                                    borderlineBottomColor.getIntValue(),
                                                                    EXCEL_LS_NO_LINE,
                                                                    (COLOR1_PAT)pattern.getIntValue());
                            
                            fmt.set_color2(MAKE_COLOR2(patternColor.getIntValue(), patternBackColor.getIntValue()));
                            
                            cell->SetFormat(fmt);
                            
                        }
                    }
                }
            }
        }
}

void XLS_GET_FORMAT_PROPERTY(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_LONGINT workbook;
    C_LONGINT sheet;
    C_LONGINT row;
    C_LONGINT column;
    C_LONGINT alignment;
    C_LONGINT rotation;
    C_LONGINT textProps;
    C_LONGINT borderlineTop;
    C_LONGINT borderlineTopColor;
    C_LONGINT borderlineLeft;
    C_LONGINT borderlineLeftColor;
    C_LONGINT borderlineRight;
    C_LONGINT borderlineRightColor;
    C_LONGINT borderlineBottom;
    C_LONGINT borderlineBottomColor;
    C_LONGINT pattern;
    C_LONGINT patternColor;
    C_LONGINT patternBackColor;
    
    workbook.fromParamAtIndex(pParams, 1);
    sheet.fromParamAtIndex(pParams, 2);
    row.fromParamAtIndex(pParams, 3);
    column.fromParamAtIndex(pParams, 4);
    
    BasicExcel *wb = _workbookGet(workbook.getIntValue());
    int sheetCount = sheet.getIntValue();
    
    if(wb){
        if((sheetCount > 0) && (sheetCount <= wb->GetTotalWorkSheets())){
            BasicExcelWorksheet *ws = wb->GetWorksheet(sheetCount-1);
            if(ws){
                
                int r = row.getIntValue();
                int c = column.getIntValue();
                
                if(   (c > 0)
                     && (c <= ws->GetTotalCols())
                     && (r > 0)
                     && (r <= ws->GetTotalRows())){
                    
                    BasicExcelCell *cell = ws->Cell(r-1, c-1);
                    if(cell){
                        
                        XLSFormatManager mgr(*wb);
                        CellFormat fmt(mgr, cell);
                        
                        alignment.setIntValue((int)fmt.get_alignment());
                        rotation.setIntValue((int)fmt.get_rotation());
                        textProps.setIntValue((int)fmt.get_text_props());
                        
                        borderlineTop.setIntValue(((((int)fmt.get_borderlines() & 0x00000F00)>>8)));
                        borderlineLeft.setIntValue(((((int)fmt.get_borderlines()) & 0x0000000F)));
                        borderlineRight.setIntValue(((((int)fmt.get_borderlines()) & 0x000000F0)>>4));
                        borderlineBottom.setIntValue(((((int)fmt.get_borderlines() & 0x0000F000))>>12));
                        borderlineLeftColor.setIntValue(((((int)fmt.get_borderlines() & 0x007F0000))>>16));
                        borderlineRightColor.setIntValue(((((int)fmt.get_borderlines() & 0x3F800000))>>23));
                        
                        borderlineTopColor.setIntValue(((((int)fmt.get_color1() & 0x0000007F))));
                        borderlineBottomColor.setIntValue(((((int)fmt.get_color1() & 0x00003F80))>>7));
                        
                        pattern.setIntValue(((((int)fmt.get_color1() & 0xFC000000))));
                        
                        patternColor.setIntValue(((((int)fmt.get_color2() & 0x007F))));
                        patternBackColor.setIntValue(((((int)fmt.get_color2() & 0x3F80))>>7));
                        
                    }
                }
            }
        }
    }
    
    alignment.toParamAtIndex(pParams, 5);
    rotation.toParamAtIndex(pParams, 6);
    textProps.toParamAtIndex(pParams, 7);
    borderlineTop.toParamAtIndex(pParams, 8);
    borderlineTopColor.toParamAtIndex(pParams, 9);
    borderlineLeft.toParamAtIndex(pParams, 10);
    borderlineLeftColor.toParamAtIndex(pParams, 11);
    borderlineRight.toParamAtIndex(pParams, 12);
    borderlineRightColor.toParamAtIndex(pParams, 13);
    borderlineBottom.toParamAtIndex(pParams, 14);
    borderlineBottomColor.toParamAtIndex(pParams, 15);
    pattern.toParamAtIndex(pParams, 16);
    patternColor.toParamAtIndex(pParams, 17);
    patternBackColor.toParamAtIndex(pParams, 18);
}

void XLS_Get_format_string(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_LONGINT workbook;
    C_LONGINT sheet;
    C_LONGINT row;
    C_LONGINT column;
    C_TEXT formatString;
    C_LONGINT returnValue;
    
    workbook.fromParamAtIndex(pParams, 1);
    sheet.fromParamAtIndex(pParams, 2);
    row.fromParamAtIndex(pParams, 3);
    column.fromParamAtIndex(pParams, 4);
    
    BasicExcel *wb = _workbookGet(workbook.getIntValue());
    int sheetCount = sheet.getIntValue();
    
    if(wb){
        if((sheetCount > 0) && (sheetCount <= wb->GetTotalWorkSheets())){
            BasicExcelWorksheet *ws = wb->GetWorksheet(sheetCount-1);
            if(ws){
                
                int r = row.getIntValue();
                int c = column.getIntValue();
                
                if(   (c > 0)
                     && (c <= ws->GetTotalCols())
                     && (r > 0)
                     && (r <= ws->GetTotalRows())){
                    
                    BasicExcelCell *cell = ws->Cell(r-1, c-1);
                    if(cell){
                        
                        XLSFormatManager mgr(*wb);
                        CellFormat fmt(mgr, cell);
                        
                        wstring f = mgr.get_format_string(fmt);
                        _getString(f, formatString);
                        returnValue.setIntValue(1);
                    }
                }
            }
        }
    }
    
    formatString.toParamAtIndex(pParams, 5);
    returnValue.setReturn(pResult);
}

void XLS_Set_format_string(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_LONGINT workbook;
    C_LONGINT sheet;
    C_LONGINT row;
    C_LONGINT column;
    C_TEXT formatString;
    C_LONGINT returnValue;
    
    workbook.fromParamAtIndex(pParams, 1);
    sheet.fromParamAtIndex(pParams, 2);
    row.fromParamAtIndex(pParams, 3);
    column.fromParamAtIndex(pParams, 4);
    formatString.fromParamAtIndex(pParams, 5);
    
    BasicExcel *wb = _workbookGet(workbook.getIntValue());
    int sheetCount = sheet.getIntValue();
    
    if(wb){
        if((sheetCount > 0) && (sheetCount <= wb->GetTotalWorkSheets())){
            BasicExcelWorksheet *ws = wb->GetWorksheet(sheetCount-1);
            if(ws){
                
                int r = row.getIntValue();
                int c = column.getIntValue();
                
                if(   (c > 0)
                     && (c <= ws->GetTotalCols())
                     && (r > 0)
                     && (r <= ws->GetTotalRows())){
                    
                    BasicExcelCell *cell = ws->Cell(r-1, c-1);
                    if(cell){
                        
                        XLSFormatManager mgr(*wb);
                        CellFormat fmt(mgr, cell);
                        
                        wstring f;
                        _setString(formatString, f);
                        fmt.set_format_string(f);
                        cell->SetFormat(fmt);
                        returnValue.setIntValue(1);
                    }
                }
            }
        }
    }
    
    returnValue.setReturn(pResult);
}

void XLS_Get_wrapping(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_LONGINT workbook;
    C_LONGINT sheet;
    C_LONGINT row;
    C_LONGINT column;
    C_LONGINT returnValue;
    
    workbook.fromParamAtIndex(pParams, 1);
    sheet.fromParamAtIndex(pParams, 2);
    row.fromParamAtIndex(pParams, 3);
    column.fromParamAtIndex(pParams, 4);
    
    BasicExcel *wb = _workbookGet(workbook.getIntValue());
    int sheetCount = sheet.getIntValue();
    
    if(wb){
        if((sheetCount > 0) && (sheetCount <= wb->GetTotalWorkSheets())){
            BasicExcelWorksheet *ws = wb->GetWorksheet(sheetCount-1);
            if(ws){
                
                int r = row.getIntValue();
                int c = column.getIntValue();
                
                if(   (c > 0)
                     && (c <= ws->GetTotalCols())
                     && (r > 0)
                     && (r <= ws->GetTotalRows())){
                    
                    BasicExcelCell *cell = ws->Cell(r-1, c-1);
                    
                    if(cell){
                        
                        XLSFormatManager mgr(*wb);
                        CellFormat fmt(mgr, cell);
                        
                        returnValue.setIntValue((int)fmt.is_wrapping());
                        
                    }
                    
                }
                
            }
            
        }
        
    }
    
    returnValue.setReturn(pResult);
}

void XLS_SET_WRAPPING(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_LONGINT workbook;
    C_LONGINT sheet;
    C_LONGINT row;
    C_LONGINT column;
    C_LONGINT wrapping;
    
    workbook.fromParamAtIndex(pParams, 1);
    sheet.fromParamAtIndex(pParams, 2);
    row.fromParamAtIndex(pParams, 3);
    column.fromParamAtIndex(pParams, 4);
    wrapping.fromParamAtIndex(pParams, 5);
    
    BasicExcel *wb = _workbookGet(workbook.getIntValue());
    int sheetCount = sheet.getIntValue();
    
    if(wb){
        if((sheetCount > 0) && (sheetCount <= wb->GetTotalWorkSheets())){
            BasicExcelWorksheet *ws = wb->GetWorksheet(sheetCount-1);
            if(ws){
                
                int r = row.getIntValue();
                int c = column.getIntValue();
                
                if(   (c > 0)
                     && (c <= ws->GetTotalCols())
                     && (r > 0)
                     && (r <= ws->GetTotalRows())){
                    
                    BasicExcelCell *cell = ws->Cell(r-1, c-1);
                    
                    if(cell){
                        
                        XLSFormatManager mgr(*wb);
                        CellFormat fmt(mgr);
                        
                        fmt.set_wrapping((bool)wrapping.getIntValue());
                        
                        cell->SetFormat(fmt);
                    }
                    
                }
                
            }
            
        }
        
    }
    
}

